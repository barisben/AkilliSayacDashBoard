@using System.Globalization;

@{
    ViewData["Title"] = "Anasayfa";

    IEnumerable<Log> logs = ViewData["Logs"] as IEnumerable<Log>;
    IEnumerable<LogType> logTypes = ViewData["LogTypes"] as IEnumerable<LogType>;
    IEnumerable<Device> devices = ViewData["Devices"] as IEnumerable<Device>;
    IEnumerable<Malware> malwares = ViewData["Malwares"] as IEnumerable<Malware>;
    IEnumerable<MalwareType> malwareTypes = ViewData["MalwareTypes"] as IEnumerable<MalwareType>;
    IEnumerable<Anomaly> anomalies = ViewData["Anomalies"] as IEnumerable<Anomaly>;
    IEnumerable<AnomalyType> anomalyTypes = ViewData["AnomalyTypes"] as IEnumerable<AnomalyType>;

    //malware variables
    int wormId = malwareTypes.Where(x => x.MalwareTypeName == "Worm").FirstOrDefault().MalwareTypeId;
    int wormCount = malwares.Where(x => x.MalwareTypeId == wormId).Count();
    int rootkitId = malwareTypes.Where(x => x.MalwareTypeName == "Rootkit").FirstOrDefault().MalwareTypeId;
    int rootkitCount = malwares.Where(x => x.MalwareTypeId == rootkitId).Count();
    int spywareId = malwareTypes.Where(x => x.MalwareTypeName == "Spyware").FirstOrDefault().MalwareTypeId;
    int spywareCount = malwares.Where(x => x.MalwareTypeId == spywareId).Count();
    int adwareId = malwareTypes.Where(x => x.MalwareTypeName == "Adware").FirstOrDefault().MalwareTypeId;
    int adwareCount = malwares.Where(x => x.MalwareTypeId == adwareId).Count();

    //anomaly variables
    List<Anomaly> points = new List<Anomaly>();
    List<Anomaly> contextuals = new List<Anomaly>();
    List<Anomaly> collectives = new List<Anomaly>();

    int pointId = anomalyTypes.Where(x => x.AnomalyTypeName == "Point").FirstOrDefault().AnomalyTypeId;
    int contextualId = anomalyTypes.Where(x => x.AnomalyTypeName == "Contextual").FirstOrDefault().AnomalyTypeId;
    int collectiveId = anomalyTypes.Where(x => x.AnomalyTypeName == "Collective").FirstOrDefault().AnomalyTypeId;

    foreach (var anomaly in anomalies)
    {
        if (anomaly.AnomalyTypeId == pointId) points.Add(anomaly);
        else if (anomaly.AnomalyTypeId == contextualId) contextuals.Add(anomaly);
        else if (anomaly.AnomalyTypeId == collectiveId) collectives.Add(anomaly);
    }

    var userLogTypeId = logTypes.Where(x => x.LogTypeName == "User").FirstOrDefault().LogTypeId;
    var databaseLogTypeId = logTypes.Where(x => x.LogTypeName == "Database").FirstOrDefault().LogTypeId;
    var deviceLogs = logs.Where(x => x.LogTypeId != userLogTypeId && x.LogTypeId != databaseLogTypeId).ToList();
    var userLogs = logs.Where(x => x.LogTypeId == userLogTypeId).ToList();
}

<section class="section dashboard">
    <div class="row">

        <!-- Left side columns -->
        <div class="col-lg-8">
            <div class="row">

                <div class="col-12">
                    <div class="card">

                        <div class="card-body">
                            <h5 class="card-title">Anomalies</h5>

                            <!-- ANOMALIES -->
                            <div id="chart"></div>

                            <script>
                                var options = {
                                    series: [
                                        {
                                            name: 'Point',
                                            data: [
                                @{
                                    foreach (var point in points)
                                    {
                                        @:{
                                        @:x: "@point.AnomalyTime.ToString("dd MMM yyyy HH:mm:ss UTC", new CultureInfo("en-US"))",
                                        @:y: @point.AnomalyValue,
                                        @:message: "@point.AnomalyMessage"
                                        @:},
                                    }
                                }
                                                                            ]
                                },
                                    {
                                        name: 'Contextual',
                                        data: [
                                @{
                                    foreach (var contextual in contextuals)
                                    {
                                        @:{
                                        @:x: "@contextual.AnomalyTime.ToString("dd MMM yyyy HH:mm:ss UTC", new CultureInfo("en-US"))",
                                        @:y: @contextual.AnomalyValue,
                                        @:message: "@contextual.AnomalyMessage"
                                        @:},
                                    }
                                }
                                                                            ]
                                                                    },
                                {
                                    name: 'Collective',
                                        data: [
                                @{
                                    foreach (var collective in collectives)
                                    {
                                        @:{
                                        @:x: "@collective.AnomalyTime.ToString("dd MMM yyyy HH:mm:ss UTC", new CultureInfo("en-US"))",
                                        @:y: @collective.AnomalyValue,
                                        @:message: "@collective.AnomalyMessage"
                                        @:},
                                    }
                                }
                                                                            ]
                                                                    }
                                                                    ],
                                chart: {
                                    height: 350,
                                        type: 'scatter',
                                            zoom: {
                                        type: 'xy'
                                    }
                                },
                                dataLabels: {
                                    enabled: false
                                },
                                grid: {
                                    xaxis: {
                                        lines: {
                                            show: true
                                        }
                                    },
                                    yaxis: {
                                        lines: {
                                            show: true
                                        }
                                    },
                                },
                                xaxis: {
                                    type: 'datetime'
                                },
                                yaxis: {
                                    max: 105
                                },
                                tooltip: {
                                    enabled: true,
                                        x: {
                                        format: 'dd MMM yyyy HH:mm:ss'
                                    },
                                    custom: function({ series, seriesIndex, dataPointIndex, w }) {
                                        var data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];

                                        return '</br>' +
                                            '<ul>' +
                                            '<li><b>Date</b>: ' + data.x + '</li>' +
                                            '<li><b>Value</b>: ' + data.y + '</li>' +
                                            '<li><b>Message</b>: \'' + data.message + '\'</li>' +
                                            '</ul>';
                                    }
                                }
                                                                };

                                var chart = new ApexCharts(document.querySelector("#chart"), options);
                                chart.render();
                            </script>

                            <!-- End ANOMALIES-->

                        </div>

                    </div>
                </div><!-- End Reports -->




                <!-- LOGS -->
                <div class="col-12">
                    <div class="card recent-sales overflow-auto">

                        <div class="card-body">
                            <h5 class="card-title">Logs</h5>

                            <table class="table datatable">
                                <thead>
                                    <tr>
                                        <th scope="col">Tarih</th>
                                        <th scope="col">Cihaz</th>
                                        <th scope="col">Log Tipi</th>
                                        <th scope="col">Mesaj</th>
                                        <th scope="col">Durum</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (Log log in deviceLogs)
                                    {
                                        <tr>
                                            @{
                                                var logType = logTypes.Where(x => x.LogTypeId == log.LogTypeId).FirstOrDefault();
                                            }
                                            <td>@log.LogTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td>@devices.Where(x => x.DeviceId == log.DeviceId).FirstOrDefault().DeviceName</td>
                                            <td>@logType.LogTypeName</td>
                                            <td>@log.LogMessage</td>
                                            <td>
                                                <span class="@log.LogStatusBadge">@log.LogStatus</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>

                    </div>
                </div><!-- End LOGS -->



            </div>
        </div><!-- End Left side columns -->

        <!-- Right side columns -->
        <div class="col-lg-4">
                <div class="card">
                <div class="card-body pb-0">
                    <h5 class="card-title">Malwares</h5>
                    <!-- MALWARES -->
                    <div id="pieChart" style="min-height: 400px;" class="echart"></div>

                    <script>
                        document.addEventListener("DOMContentLoaded", () => {
                            echarts.init(document.querySelector("#pieChart")).setOption({
                                tooltip: {
                                    trigger: 'item'
                                },
                                legend: {
                                    orient: 'horizontal',
                                    left: 'center'
                                },
                                series: [{
                                    name: 'Malware Count',
                                    type: 'pie',
                                    radius: '50%',
                                    data: [{
                                        value: @wormCount,
                                        name: 'Worm'
                                    },
                                    {
                                        value: @rootkitCount,
                                        name: 'Rootkit'
                                    },
                                    {
                                        value: @spywareCount,
                                        name: 'Spyware'
                                    },
                                    {
                                        value: @adwareCount,
                                        name: 'Adware'
                                    },
                                    ],
                                    emphasis: {
                                        itemStyle: {
                                            shadowBlur: 10,
                                            shadowOffsetX: 0,
                                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                                        }
                                    }
                                }]
                            });
                        });
                    </script>
                    <!-- End MALWARES -->
                </div>
                </div>
        </div>
    </div>
</section>